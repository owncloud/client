// model-header.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDrive.h
 *
 * The drive represents a space on the storage.
 */

#ifndef OAIDrive_H
#define OAIDrive_H

#include "owncloudlib.h"

#include "OAIDriveItem.h"
#include "OAIQuota.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {
class OAIQuota;
class OAIDriveItem;


class OAIDrivePrivate;

class OWNCLOUDSYNC_EXPORT OAIDrive : public OAIObject
{
public:
    OAIDrive();
    OAIDrive(const OAIDrive &other);
    OAIDrive(QString json);
    ~OAIDrive() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getCreatedDateTime() const;
    void setCreatedDateTime(const QDateTime &created_date_time);
    bool is_created_date_time_Set() const;
    bool is_created_date_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getETag() const;
    void setETag(const QString &e_tag);
    bool is_e_tag_Set() const;
    bool is_e_tag_Valid() const;

    QDateTime getLastModifiedDateTime() const;
    void setLastModifiedDateTime(const QDateTime &last_modified_date_time);
    bool is_last_modified_date_time_Set() const;
    bool is_last_modified_date_time_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getWebUrl() const;
    void setWebUrl(const QString &web_url);
    bool is_web_url_Set() const;
    bool is_web_url_Valid() const;

    QString getDriveType() const;
    void setDriveType(const QString &drive_type);
    bool is_drive_type_Set() const;
    bool is_drive_type_Valid() const;

    QString getDriveAlias() const;
    void setDriveAlias(const QString &drive_alias);
    bool is_drive_alias_Set() const;
    bool is_drive_alias_Valid() const;

    OAIQuota getQuota() const;
    void setQuota(const OAIQuota &quota);
    bool is_quota_Set() const;
    bool is_quota_Valid() const;

    QList<OAIDriveItem> getItems() const;
    void setItems(const QList<OAIDriveItem> &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    OAIDriveItem getRoot() const;
    void setRoot(const OAIDriveItem &root);
    bool is_root_Set() const;
    bool is_root_Valid() const;

    QList<OAIDriveItem> getSpecial() const;
    void setSpecial(const QList<OAIDriveItem> &special);
    bool is_special_Set() const;
    bool is_special_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();
    Q_DECLARE_PRIVATE(OAIDrive)
    QSharedPointer<OAIDrivePrivate> d_ptr;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDrive)

#endif // OAIDrive_H
