// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleted.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIDeletedPrivate
{
    friend class OAIDeleted;

    QString state;
    bool state_isSet;
    bool state_isValid;
};

OAIDeleted::OAIDeleted()
    : d_ptr()
{
}

OAIDeleted::OAIDeleted(const OAIDeleted &other)
    : d_ptr(other.d_ptr)
{
}

OAIDeleted::OAIDeleted(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIDeleted::~OAIDeleted() = default;

void OAIDeleted::initializeModel()
{
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIDeletedPrivate{});

        Q_D(OAIDeleted);


        d->state_isSet = false;
        d->state_isValid = false;
    }
}

void OAIDeleted::fromJson(QString jsonString)
{
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleted::fromJsonObject(QJsonObject json)
{
    initializeModel();

    Q_D(OAIDeleted);

    d->state_isValid = ::OpenAPI::fromJsonValue(d->state, json[QStringLiteral("state")]);
    d->state_isSet = !json[QStringLiteral("state")].isNull() && d->state_isValid;
}

QString OAIDeleted::asJson() const
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString::fromUtf8(bytes);
}

QJsonObject OAIDeleted::asJsonObject() const
{
    Q_D(const OAIDeleted);
    if (!d) {
        return {};
    }
    QJsonObject obj;
    if (d->state_isSet) {
        obj.insert(QStringLiteral("state"), ::OpenAPI::toJsonValue(d->state));
    }
    return obj;
}

QString OAIDeleted::getState() const
{
    Q_D(const OAIDeleted);
    if (!d) {
        return {};
    }
    return d->state;
}
void OAIDeleted::setState(const QString &state)
{
    Q_D(OAIDeleted);
    Q_ASSERT(d);

    d->state = state;
    d->state_isSet = true;
}

bool OAIDeleted::is_state_Set() const
{
    Q_D(const OAIDeleted);
    if (!d) {
        return false;
    }

    return d->state_isSet;
}

bool OAIDeleted::is_state_Valid() const
{
    Q_D(const OAIDeleted);
    if (!d) {
        return false;
    }
    return d->state_isValid;
}

bool OAIDeleted::isSet() const
{
    Q_D(const OAIDeleted);
    if (!d) {
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleted::isValid() const
{
    Q_D(const OAIDeleted);
    if (!d) {
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
