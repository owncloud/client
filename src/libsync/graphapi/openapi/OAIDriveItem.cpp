// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDriveItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIDriveItemPrivate
{
    friend class OAIDriveItem;

    QString id;
    bool id_isSet;
    bool id_isValid;

    QDateTime created_date_time;
    bool created_date_time_isSet;
    bool created_date_time_isValid;

    QString description;
    bool description_isSet;
    bool description_isValid;

    QString e_tag;
    bool e_tag_isSet;
    bool e_tag_isValid;

    QDateTime last_modified_date_time;
    bool last_modified_date_time_isSet;
    bool last_modified_date_time_isValid;

    QString name;
    bool name_isSet;
    bool name_isValid;

    QString web_url;
    bool web_url_isSet;
    bool web_url_isValid;

    QString content;
    bool content_isSet;
    bool content_isValid;

    QString c_tag;
    bool c_tag_isSet;
    bool c_tag_isValid;

    OAIDeleted deleted;
    bool deleted_isSet;
    bool deleted_isValid;

    OAIObject root;
    bool root_isSet;
    bool root_isValid;

    OAISpecialFolder special_folder;
    bool special_folder_isSet;
    bool special_folder_isValid;

    qint64 size;
    bool size_isSet;
    bool size_isValid;

    QString web_dav_url;
    bool web_dav_url_isSet;
    bool web_dav_url_isValid;

    QList<OAIDriveItem> children;
    bool children_isSet;
    bool children_isValid;

    bool client_synchronize;
    bool client_synchronize_isSet;
    bool client_synchronize_isValid;

    bool ui_hidden;
    bool ui_hidden_isSet;
    bool ui_hidden_isValid;
};

OAIDriveItem::OAIDriveItem()
    : d_ptr()
{
}

OAIDriveItem::OAIDriveItem(const OAIDriveItem &other)
    : d_ptr(other.d_ptr)
{
}

OAIDriveItem::OAIDriveItem(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIDriveItem::~OAIDriveItem() = default;

void OAIDriveItem::initializeModel()
{
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIDriveItemPrivate{});

        Q_D(OAIDriveItem);

        d->id_isSet = false;
        d->id_isValid = false;

        d->created_date_time_isSet = false;
        d->created_date_time_isValid = false;

        d->description_isSet = false;
        d->description_isValid = false;

        d->e_tag_isSet = false;
        d->e_tag_isValid = false;

        d->last_modified_date_time_isSet = false;
        d->last_modified_date_time_isValid = false;

        d->name_isSet = false;
        d->name_isValid = false;

        d->web_url_isSet = false;
        d->web_url_isValid = false;

        d->content_isSet = false;
        d->content_isValid = false;

        d->c_tag_isSet = false;
        d->c_tag_isValid = false;

        d->deleted_isSet = false;
        d->deleted_isValid = false;

        d->root_isSet = false;
        d->root_isValid = false;

        d->special_folder_isSet = false;
        d->special_folder_isValid = false;

        d->size_isSet = false;
        d->size_isValid = false;

        d->web_dav_url_isSet = false;
        d->web_dav_url_isValid = false;

        d->children_isSet = false;
        d->children_isValid = false;

        d->client_synchronize_isSet = false;
        d->client_synchronize_isValid = false;

        d->ui_hidden_isSet = false;
        d->ui_hidden_isValid = false;
    }
}

void OAIDriveItem::fromJson(QString jsonString)
{
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDriveItem::fromJsonObject(QJsonObject json)
{
    initializeModel();

    Q_D(OAIDriveItem);

    d->id_isValid = ::OpenAPI::fromJsonValue(d->id, json[QStringLiteral("id")]);
    d->id_isSet = !json[QStringLiteral("id")].isNull() && d->id_isValid;

    d->created_date_time_isValid = ::OpenAPI::fromJsonValue(d->created_date_time, json[QStringLiteral("createdDateTime")]);
    d->created_date_time_isSet = !json[QStringLiteral("createdDateTime")].isNull() && d->created_date_time_isValid;

    d->description_isValid = ::OpenAPI::fromJsonValue(d->description, json[QStringLiteral("description")]);
    d->description_isSet = !json[QStringLiteral("description")].isNull() && d->description_isValid;

    d->e_tag_isValid = ::OpenAPI::fromJsonValue(d->e_tag, json[QStringLiteral("eTag")]);
    d->e_tag_isSet = !json[QStringLiteral("eTag")].isNull() && d->e_tag_isValid;

    d->last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(d->last_modified_date_time, json[QStringLiteral("lastModifiedDateTime")]);
    d->last_modified_date_time_isSet = !json[QStringLiteral("lastModifiedDateTime")].isNull() && d->last_modified_date_time_isValid;

    d->name_isValid = ::OpenAPI::fromJsonValue(d->name, json[QStringLiteral("name")]);
    d->name_isSet = !json[QStringLiteral("name")].isNull() && d->name_isValid;

    d->web_url_isValid = ::OpenAPI::fromJsonValue(d->web_url, json[QStringLiteral("webUrl")]);
    d->web_url_isSet = !json[QStringLiteral("webUrl")].isNull() && d->web_url_isValid;

    d->content_isValid = ::OpenAPI::fromJsonValue(d->content, json[QStringLiteral("content")]);
    d->content_isSet = !json[QStringLiteral("content")].isNull() && d->content_isValid;

    d->c_tag_isValid = ::OpenAPI::fromJsonValue(d->c_tag, json[QStringLiteral("cTag")]);
    d->c_tag_isSet = !json[QStringLiteral("cTag")].isNull() && d->c_tag_isValid;

    d->deleted_isValid = ::OpenAPI::fromJsonValue(d->deleted, json[QStringLiteral("deleted")]);
    d->deleted_isSet = !json[QStringLiteral("deleted")].isNull() && d->deleted_isValid;

    d->root_isValid = ::OpenAPI::fromJsonValue(d->root, json[QStringLiteral("root")]);
    d->root_isSet = !json[QStringLiteral("root")].isNull() && d->root_isValid;

    d->special_folder_isValid = ::OpenAPI::fromJsonValue(d->special_folder, json[QStringLiteral("specialFolder")]);
    d->special_folder_isSet = !json[QStringLiteral("specialFolder")].isNull() && d->special_folder_isValid;

    d->size_isValid = ::OpenAPI::fromJsonValue(d->size, json[QStringLiteral("size")]);
    d->size_isSet = !json[QStringLiteral("size")].isNull() && d->size_isValid;

    d->web_dav_url_isValid = ::OpenAPI::fromJsonValue(d->web_dav_url, json[QStringLiteral("webDavUrl")]);
    d->web_dav_url_isSet = !json[QStringLiteral("webDavUrl")].isNull() && d->web_dav_url_isValid;

    d->children_isValid = ::OpenAPI::fromJsonValue(d->children, json[QStringLiteral("children")]);
    d->children_isSet = !json[QStringLiteral("children")].isNull() && d->children_isValid;

    d->client_synchronize_isValid = ::OpenAPI::fromJsonValue(d->client_synchronize, json[QStringLiteral("@client.synchronize")]);
    d->client_synchronize_isSet = !json[QStringLiteral("@client.synchronize")].isNull() && d->client_synchronize_isValid;

    d->ui_hidden_isValid = ::OpenAPI::fromJsonValue(d->ui_hidden, json[QStringLiteral("@UI.Hidden")]);
    d->ui_hidden_isSet = !json[QStringLiteral("@UI.Hidden")].isNull() && d->ui_hidden_isValid;
}

QString OAIDriveItem::asJson() const
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString::fromUtf8(bytes);
}

QJsonObject OAIDriveItem::asJsonObject() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    QJsonObject obj;
    if (d->id_isSet) {
        obj.insert(QStringLiteral("id"), ::OpenAPI::toJsonValue(d->id));
    }
    if (d->created_date_time_isSet) {
        obj.insert(QStringLiteral("createdDateTime"), ::OpenAPI::toJsonValue(d->created_date_time));
    }
    if (d->description_isSet) {
        obj.insert(QStringLiteral("description"), ::OpenAPI::toJsonValue(d->description));
    }
    if (d->e_tag_isSet) {
        obj.insert(QStringLiteral("eTag"), ::OpenAPI::toJsonValue(d->e_tag));
    }
    if (d->last_modified_date_time_isSet) {
        obj.insert(QStringLiteral("lastModifiedDateTime"), ::OpenAPI::toJsonValue(d->last_modified_date_time));
    }
    if (d->name_isSet) {
        obj.insert(QStringLiteral("name"), ::OpenAPI::toJsonValue(d->name));
    }
    if (d->web_url_isSet) {
        obj.insert(QStringLiteral("webUrl"), ::OpenAPI::toJsonValue(d->web_url));
    }
    if (d->content_isSet) {
        obj.insert(QStringLiteral("content"), ::OpenAPI::toJsonValue(d->content));
    }
    if (d->c_tag_isSet) {
        obj.insert(QStringLiteral("cTag"), ::OpenAPI::toJsonValue(d->c_tag));
    }
    if (d->deleted.isSet()) {
        obj.insert(QStringLiteral("deleted"), ::OpenAPI::toJsonValue(d->deleted));
    }
    if (d->root_isSet) {
        obj.insert(QStringLiteral("root"), ::OpenAPI::toJsonValue(d->root));
    }
    if (d->special_folder.isSet()) {
        obj.insert(QStringLiteral("specialFolder"), ::OpenAPI::toJsonValue(d->special_folder));
    }
    if (d->size_isSet) {
        obj.insert(QStringLiteral("size"), ::OpenAPI::toJsonValue(d->size));
    }
    if (d->web_dav_url_isSet) {
        obj.insert(QStringLiteral("webDavUrl"), ::OpenAPI::toJsonValue(d->web_dav_url));
    }
    if (d->children.size() > 0) {
        obj.insert(QStringLiteral("children"), ::OpenAPI::toJsonValue(d->children));
    }
    if (d->client_synchronize_isSet) {
        obj.insert(QStringLiteral("@client.synchronize"), ::OpenAPI::toJsonValue(d->client_synchronize));
    }
    if (d->ui_hidden_isSet) {
        obj.insert(QStringLiteral("@UI.Hidden"), ::OpenAPI::toJsonValue(d->ui_hidden));
    }
    return obj;
}

QString OAIDriveItem::getId() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->id;
}
void OAIDriveItem::setId(const QString &id)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->id = id;
    d->id_isSet = true;
}

bool OAIDriveItem::is_id_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->id_isSet;
}

bool OAIDriveItem::is_id_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->id_isValid;
}

QString OAIDriveItem::getDescription() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->description;
}
void OAIDriveItem::setDescription(const QString &description)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->description = description;
    d->description_isSet = true;
}

bool OAIDriveItem::is_description_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->description_isSet;
}

bool OAIDriveItem::is_description_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->description_isValid;
}

QString OAIDriveItem::getETag() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->e_tag;
}
void OAIDriveItem::setETag(const QString &e_tag)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->e_tag = e_tag;
    d->e_tag_isSet = true;
}

bool OAIDriveItem::is_e_tag_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->e_tag_isSet;
}

bool OAIDriveItem::is_e_tag_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->e_tag_isValid;
}

QString OAIDriveItem::getName() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->name;
}
void OAIDriveItem::setName(const QString &name)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->name = name;
    d->name_isSet = true;
}

bool OAIDriveItem::is_name_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->name_isSet;
}

bool OAIDriveItem::is_name_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->name_isValid;
}

QString OAIDriveItem::getWebUrl() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->web_url;
}
void OAIDriveItem::setWebUrl(const QString &web_url)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->web_url = web_url;
    d->web_url_isSet = true;
}

bool OAIDriveItem::is_web_url_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->web_url_isSet;
}

bool OAIDriveItem::is_web_url_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->web_url_isValid;
}

QString OAIDriveItem::getContent() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->content;
}
void OAIDriveItem::setContent(const QString &content)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->content = content;
    d->content_isSet = true;
}

bool OAIDriveItem::is_content_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->content_isSet;
}

bool OAIDriveItem::is_content_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->content_isValid;
}

QString OAIDriveItem::getCTag() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->c_tag;
}
void OAIDriveItem::setCTag(const QString &c_tag)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->c_tag = c_tag;
    d->c_tag_isSet = true;
}

bool OAIDriveItem::is_c_tag_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->c_tag_isSet;
}

bool OAIDriveItem::is_c_tag_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->c_tag_isValid;
}

OAIDeleted OAIDriveItem::getDeleted() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->deleted;
}
void OAIDriveItem::setDeleted(const OAIDeleted &deleted)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->deleted = deleted;
    d->deleted_isSet = true;
}

bool OAIDriveItem::is_deleted_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->deleted_isSet;
}

bool OAIDriveItem::is_deleted_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->deleted_isValid;
}

OAIObject OAIDriveItem::getRoot() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->root;
}
void OAIDriveItem::setRoot(const OAIObject &root)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->root = root;
    d->root_isSet = true;
}

bool OAIDriveItem::is_root_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->root_isSet;
}

bool OAIDriveItem::is_root_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->root_isValid;
}

OAISpecialFolder OAIDriveItem::getSpecialFolder() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->special_folder;
}
void OAIDriveItem::setSpecialFolder(const OAISpecialFolder &special_folder)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->special_folder = special_folder;
    d->special_folder_isSet = true;
}

bool OAIDriveItem::is_special_folder_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->special_folder_isSet;
}

bool OAIDriveItem::is_special_folder_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->special_folder_isValid;
}

qint64 OAIDriveItem::getSize() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->size;
}
void OAIDriveItem::setSize(const qint64 &size)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->size = size;
    d->size_isSet = true;
}

bool OAIDriveItem::is_size_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->size_isSet;
}

bool OAIDriveItem::is_size_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->size_isValid;
}

QString OAIDriveItem::getWebDavUrl() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return {};
    }
    return d->web_dav_url;
}
void OAIDriveItem::setWebDavUrl(const QString &web_dav_url)
{
    Q_D(OAIDriveItem);
    Q_ASSERT(d);

    d->web_dav_url = web_dav_url;
    d->web_dav_url_isSet = true;
}

bool OAIDriveItem::is_web_dav_url_Set() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }

    return d->web_dav_url_isSet;
}

bool OAIDriveItem::is_web_dav_url_Valid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    return d->web_dav_url_isValid;
}

bool OAIDriveItem::isSet() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->c_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->deleted.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->special_folder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->web_dav_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (d->client_synchronize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->ui_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDriveItem::isValid() const
{
    Q_D(const OAIDriveItem);
    if (!d) {
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
